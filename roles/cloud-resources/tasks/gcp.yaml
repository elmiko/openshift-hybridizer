---

- name: Provisioning GCE
  debug:
   msg: "Provisioning GCE Instances"

#############################################################################
## Security KeyPair
#############################################################################
- name: "Check that the {{gcp.private_key_file}} exists"
  stat:
    path: "{{gcp.private_key_file}}"
  register: gcpsshfile

- name: "GCP SSH Key Pair"
  shell: |
    ssh-keygen -t rsa -N '' -f "{{gcp.private_key_file}}"
  when: gcpsshfile.stat.exists == False
  register: gcp_sshkey
  tags:
    - cloud-gcp

- name: GCP SSH Public Key Metadata
  set_fact: 
     ssh_public_key_metadata: "{{ lookup('file',gcp.public_key_file) + ' ' + gcp.cloud_user | trim }}"

# - debug:
#     msg: "{{ssh_public_key_metadata}}"
#   when: gcp_sshkey is changed

#############################################################################
## Network
#############################################################################

- name: GCE Create Static IP
  gcp_compute_address:
    name: openshift-ip
    auth_kind: serviceaccount
    service_account_file: "{{gcp.credentials_file}}"
    project: "{{ gcp.project_id }}"
    region: "{{gcp.region}}"
  tags:
    - cloud-gcp
  register:
    static_address

# - name: GCE Create Static IP
#   gce_eip:
#     service_account_email: "{{ gcp.service_account_email }}"
#     credentials_file: "{{ gcp.credentials_file }}"
#     project_id: "{{ gcp.project_id }}"
#     name: openshift-ip
#     region: "{{gcp.region}}"
#     state: present
#   tags:
#     - cloud-gcp

- name: GCE Create Firewall Rule to allow OpenShift Console Access
  gce_net:
    service_account_email: "{{ gcp.service_account_email }}"
    credentials_file: "{{ gcp.credentials_file }}"
    project_id: "{{ gcp.project_id }}"
    name: default
    fwname: "openshift-master-console"
    allowed: tcp:8443
    state: "present"
    target_tags: "openshift-master"
  tags:
    - cloud-gcp

- name: GCE Create All In One OpenShift Node
  gcp_compute_instance:
    name: "{{instance_name}}"
    machine_type: "{{gcp.machine_type}}"
    auth_kind: serviceaccount
    service_account_file: "{{gcp.credentials_file}}"
    service_accounts:
      - scopes:
        - "https://www.googleapis.com/auth/logging.write"
        - "https://www.googleapis.com/auth/monitoring"
        - "https://www.googleapis.com/auth/compute"
        - "https://www.googleapis.com/auth/devstorage.read_write"
        - 'https://www.googleapis.com/auth/pubsub'
        - 'https://www.googleapis.com/auth/trace.append'
        email: "{{gcp.service_account_email}}"
    project: "{{ gcp.project_id }}"
    zone: "{{gcp.zone}}"
    metadata:
      ssh-keys:
        - "{{gcp.cloud_user}}:{{ssh_public_key_metadata}}"
    min_cpu_platform: "{{gcp.min_cpu_platform}}"
    disks:
      - auto_delete: true
        boot: true
        initialize_params:
          source_image: "{{gcp.os_source_image}}"
          disk_size_gb: "20"
    network_interfaces:
      - access_configs:
        - name: "External NAT"
          nat_ip: "{{static_address}}"
          type: ONE_TO_ONE_NAT
    tags:
      items: http-server,https-server,openshift-master
  register: gce_master
  tags:
    - cloud-gcp

# - name: GCE Create All In One OpenShift Node
#   gce:
#     instance_names: "{{instance_name}}"
#     machine_type: "{{gcp.machine_type}}"
#     image: "{{gcp.image}}"
#     external_ip: "openshift-ip"
#     service_account_email: "{{ gcp.service_account_email }}"
#     credentials_file: "{{ gcp.credentials_file }}"
#     project_id: "{{ gcp.project_id }}"
#     zone: "{{gcp.zone}}"
#     disk_size: "20"
#     persistent_boot_disk: "True"
#     metadata: 
#       ssh-keys:
#         - "{{gcp.cloud_user}}:{{ssh_public_key_metadata}}"
#     service_account_permissions:
#       - logging-write
#       - monitoring
#       - compute-rw
#       - storage-rw
#       - 'https://www.googleapis.com/auth/pubsub'
#       - 'https://www.googleapis.com/auth/trace.append'
#     tags: http-server,https-server,openshift-master
#   register: gce_master
#   tags:
#     - cloud-gcp

- name: GCE Create Docker Disk
  gce_pd:
    name: "{{instance_name}}-docker-disk"
    size_gb: "{{gcp.docker_disk_size}}"
    delete_on_termination: "yes"
    disk_type: pd-ssd
    instance_name: "{{instance_name}}"
    mode: READ_WRITE
    service_account_email: "{{ gcp.service_account_email }}"
    credentials_file: "{{ gcp.credentials_file }}"
    project_id: "{{ gcp.project_id }}"
    zone: "{{gcp.zone}}"
  tags:
    - cloud-gcp

- name: GCP Set VM Facts
  set_fact:
    public_ip: "{{static_address.address}}"

#      public_ip: "{{ gce_master.instance_data[0].public_ip }}"
#############################################################################
## Write to inventory
##############################################################################
- name: Setup Cloud Inventory Tasks
  include_tasks: "cloud_inventory.yaml"
  vars:
    cloud_host: "{{ public_ip }}"
    cloud_user: "{{ gcp.cloud_user}}"
    private_key_file: "{{gcp.private_key_file}}"
    cloud_host_alias: "gcp-openshift"
    cloud_provider: "gcp"
    is_rhel: "{{gcp.is_rhel}}"
    hybricloud_inventory_dir: "{{hybridcloud_distro_base_dir}}/gcp/inventory"
    hybridcloud_distro_dir: "{{hybridcloud_distro_base_dir}}/gcp"
  tags:
    - cloud-gcp
